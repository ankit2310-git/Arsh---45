// Question 1

class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr, int n) {
        Collections.sort(arr);
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        ArrayList<Integer> p = new ArrayList<>();
        boolean[] bool = new boolean[n];
        permutation(0, n, list, p, bool, arr);
        return list;
    }
    
    static void permutation(int i, int n, ArrayList<ArrayList<Integer>> list, ArrayList<Integer> p, boolean[] bool, ArrayList<Integer> arr){
        if(i == n){
            list.add(new ArrayList<>(p));
            return;
        }
        
        for(int j = 0; j < n; j++){
            if(!bool[j]){
                if(j > 0 && arr.get(j) == arr.get(j - 1) && !bool[j - 1]) {
                    continue;
                }
                p.add(arr.get(j));
                bool[j] = true;
                permutation(i + 1, n, list, p, bool, arr);
                bool[j] = false;
                p.remove(p.size() - 1);
            }
        }
    }
}

// Question 2

class Solution {
    public void gameOfLife(int[][] board) {
        int n = board.length;
        int m = board[0].length;

        int[][] copy = new int[n][m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++) copy[i][j] = board[i][j];
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                check(copy, i, j, board);
            }
        }


    }

    void check(int[][] copy, int i, int j, int[][] board){
        int ones = 0;
        int zeroes = 0;
        for(int m =i-1; m <i+2; m++){
            if(m >= 0 && m < board.length){
                for(int n =j-1; n <j+2; n++){
                    if(n >= 0 && n < board[0].length){
                        if(m == i && n == j)continue;
                        if(copy[m][n] == 0){
                            zeroes++;
                        } else ones++;
                    }
                }
            }
        }

        int curr = copy[i][j];
        if(curr == 0 && ones == 3){
            board[i][j] = 1;
        }else if(curr == 1){
            if(ones < 2){
                board[i][j] = 0;
            }else if(ones > 3){
                board[i][j] = 0;
            }
        }
    }
}

// Question 3

class Solution {
    public String intToRoman(int num) {
        StringBuilder sb = new StringBuilder();
        int[] val = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] s = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

        for (int i = 0; i < val.length; i++) {
            while (num >= val[i]) {
                num -= val[i];
                sb.append(s[i]);
            }
        }

        return sb.toString();
    }
}

// Question 4

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }
        return dummyHead.next;
    }
}

// Question 5

