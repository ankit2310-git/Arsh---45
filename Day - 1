// 1st question 

class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);

        slow = nums[0];
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
}

//

// 2nd Question

class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length-1;
        while(mid <= high){
            if(nums[mid] == 0){
                if(low != mid){
                    swap(nums, low, mid);
                }
                low++;
                mid++;
            } else if(nums[mid] == 1){
                mid++;
            }else{
                swap(nums, mid, high);
                high--;
            }
        }
    }

    void swap(int[] nums, int s, int e){
        int temp = nums[s];
        nums[s] = nums[e];
        nums[e] = temp;
    }
}

//

// 3rd Question 

class Solution {
    public int removeDuplicates(int[] nums) {
        int pointer = 1;
        int n = nums.length;

        for(int i=1; i< n; i++){
            if(nums[i] != nums[i-1]){
                nums[pointer] = nums[i];
                pointer++;
            }
        }

        return pointer;
    }
}

//

// 4th Question 

class Solution {
    public void setZeroes(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        boolean[][] set = new boolean[m][n];

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j] == 0 && !set[i][j]){
                    setValue(matrix, set, i, j);
                }
            }
        }
    }

    void setValue(int[][] matrix, boolean[][] set, int m, int n){
        for(int i =0; i < matrix.length; i++){
            if(matrix[i][n] != 0) set[i][n] = true;
            matrix[i][n] = 0;
        }

        for(int i=0; i< matrix[0].length; i++){
            if(matrix[m][i] != 0)set[m][i] = true;
            matrix[m][i] = 0;
        }
    }
}

//  5th Question 

class Solution {
    public void moveZeroes(int[] nums) {
        int pointer = 0;
        for(int i =0; i < nums.length; i++){
            if(nums[i] != 0){
                swap(nums, pointer, i);
                pointer++;
            }
        }
    }
    void swap(int[] nums, int s, int e){
        int temp = nums[s];
        nums[s] = nums[e];
        nums[e] = temp;
    }
}

//


