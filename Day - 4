// Question 1 

class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int reach = 0;
        for(int i = 0; i < n; i++){
            if(i > reach) return false;
            reach = Math.max(reach, i + nums[i]);
            if(reach >= n-1) return true;
        }
        return true;
    }
}

// Question 2

class Solution {
    public int majorityElement(int[] nums) {
        int majority = 0;
        int cnt = 0;
        for(int num : nums){
            if(cnt == 0){
                majority = num;
                cnt++;
            }else if(num == majority){
                cnt++;
            }else{
                cnt--;
            }
        }
        return majority;
    }
}

// Question 3

class Solution {
    public int reversePairs(int[] nums) {
        int[] temp = new int[nums.length];
        return mergeSort(nums, 0, nums.length-1, temp);
    }
    int mergeSort(int[] nums, int s, int e, int[] temp){
        int count = 0;
        if(s < e){
            int mid = s + (e-s)/2;
            count += mergeSort(nums, s, mid, temp);
            count += mergeSort(nums, mid+1, e, temp);
            count += merge(nums, s, mid+1, e, temp);
        }
        return count;
    }

    int merge(int[] nums, int s, int mid, int h, int[] temp){
        int count = 0, x = mid;
        for(int i=s; i < mid; i++){
            while(x <= h && nums[i] > (long)2*nums[x]){
                x++;
            }
            count += x-mid;
        }

        int i = s, j = mid, k = s;
        while( i<=(mid-1) && (j <= h) ){
            if(nums[i]<=nums[j]){
                temp[k++] = nums[i++];
            }else{
                temp[k++] = nums[j++];
            }
        }
        while(i<=mid-1)
            temp[k++] = nums[i++];
        
        while(j<=h)
            temp[k++] = nums[j++];
        
        for(i = s; i<=h; i++)
            nums[i] = temp[i];
            
        return count;
    }
}

